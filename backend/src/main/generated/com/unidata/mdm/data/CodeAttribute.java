//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.09.09 at 03:48:37 PM MSK 
//


package com.unidata.mdm.data;

import java.io.Serializable;
import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * Кодовый атрибут.
 *             
 * 
 * <p>Java class for CodeAttribute complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CodeAttribute"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://data.mdm.unidata.com/}AbstractCodeAttribute"&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CodeAttribute")
public class CodeAttribute
    extends CodeAttributeImpl
    implements Serializable
{

    private final static long serialVersionUID = 12345L;

    @Override
    public CodeAttribute withIntValue(Long value) {
        setIntValue(value);
        return this;
    }

    @Override
    public CodeAttribute withStringValue(String value) {
        setStringValue(value);
        return this;
    }

    @Override
    public CodeAttribute withSupplementaryIntValues(Long... values) {
        if (values!= null) {
            for (Long value: values) {
                getSupplementaryIntValues().add(value);
            }
        }
        return this;
    }

    @Override
    public CodeAttribute withSupplementaryIntValues(Collection<Long> values) {
        if (values!= null) {
            getSupplementaryIntValues().addAll(values);
        }
        return this;
    }

    @Override
    public CodeAttribute withSupplementaryStringValues(String... values) {
        if (values!= null) {
            for (String value: values) {
                getSupplementaryStringValues().add(value);
            }
        }
        return this;
    }

    @Override
    public CodeAttribute withSupplementaryStringValues(Collection<String> values) {
        if (values!= null) {
            getSupplementaryStringValues().addAll(values);
        }
        return this;
    }

    @Override
    public CodeAttribute withName(String value) {
        setName(value);
        return this;
    }

}
