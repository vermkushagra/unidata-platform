<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <entry key="SELECT_ALL_JOBS">
        <![CDATA[
        SELECT *
        FROM job
        ]]>
    </entry>
    <entry key="SELECT_ALL_JOBS_AND_PARAMS">
        <![CDATA[
        SELECT j.id AS j_id,
               j.create_date AS j_create_date,
               j.update_date AS j_update_date,
               j.created_by AS j_created_by,
               j.updated_by AS j_updated_by,
               j.name AS j_name,
               j.job_name_ref AS j_job_name_ref,
               j.cron_expr AS j_cron_expr,
               j.descr AS j_descr,
               j.enabled AS j_enabled,
               j.error AS j_error,
               p.create_date AS p_create_date,
               p.update_date AS p_update_date,
               p.created_by AS p_created_by,
               p.updated_by AS p_updated_by,
               p.name AS p_name,
               p.val_string AS p_val_string,
               p.val_date AS p_val_date,
               p.val_long AS p_val_long,
               p.val_double AS p_val_double,
               p.val_boolean AS p_val_boolean,
               p.val_arr_string AS p_val_arr_string,
               p.val_arr_date AS p_val_arr_date,
               p.val_arr_long AS p_val_arr_long,
               p.val_arr_double AS p_val_arr_double,
               p.val_arr_boolean AS p_val_arr_boolean,
               p.id AS p_id
        FROM job j
            LEFT JOIN job_parameter p ON p.job_id = j.id
        ]]>
    </entry>
    <entry key="SELECT_JOBS_COUNT_BY_FILTER">
        <![CDATA[
        SELECT count(j.id)
        FROM job j
        WHERE true
              and (
                  1 != :activeFilterEnabled
                  or
                  (1 = :activeFilterEnabled and j.enabled = :enabled)
              )
        ]]>
    </entry>
    <entry key="SEARCH_JOBS_BY_FILTER">
        <![CDATA[
        SELECT j.id,
            j.create_date,
            j.update_date,
            j.created_by,
            j.updated_by,
            j.name,
            j.job_name_ref,
            j.cron_expr,
            j.descr,
            j.enabled,
            j.error
        FROM job j
        WHERE true
              and (
                  1 != :activeFilterEnabled
                  or
                  (1 = :activeFilterEnabled and j.enabled = :enabled)
              )
        ORDER BY name asc
        limit :limit offset :offset
        ]]>
    </entry>
    <entry key="SELECT_BY_JOB_NAME">
        <![CDATA[
        SELECT id,
            create_date,
            update_date,
            created_by,
            updated_by,
            name,
            job_name_ref,
            cron_expr,
            descr,
            enabled,
            error
        FROM job
        WHERE name = :name
        ]]>
    </entry>
    <entry key="SELECT_BY_JOB_ID">
        <![CDATA[
        SELECT id,
            create_date,
            update_date,
            created_by,
            updated_by,
            name,
            job_name_ref,
            cron_expr,
            descr,
            enabled,
            error
        FROM job
        WHERE id = :id
        ]]>
    </entry>
    <entry key="SELECT_BY_JOB_ID_WITH_PARAMETERS">
        <![CDATA[
        SELECT j.id AS j_id,
               j.create_date AS j_create_date,
               j.update_date AS j_update_date,
               j.created_by AS j_created_by,
               j.updated_by AS j_updated_by,
               j.name AS j_name,
               j.job_name_ref AS j_job_name_ref,
               j.cron_expr AS j_cron_expr,
               j.descr AS j_descr,
               j.enabled AS j_enabled,
               j.error AS j_error,
               p.create_date AS p_create_date,
               p.update_date AS p_update_date,
               p.created_by AS p_created_by,
               p.updated_by AS p_updated_by,
               p.name AS p_name,
               p.val_string AS p_val_string,
               p.val_date AS p_val_date,
               p.val_long AS p_val_long,
               p.val_double AS p_val_double,
               p.val_boolean AS p_val_boolean,
               p.val_arr_string AS p_val_arr_string,
               p.val_arr_date AS p_val_arr_date,
               p.val_arr_long AS p_val_arr_long,
               p.val_arr_double AS p_val_arr_double,
               p.val_arr_boolean AS p_val_arr_boolean,
               p.id AS p_id
        FROM job j
            LEFT JOIN job_parameter p ON p.job_id = j.id
        WHERE j.id = :id
        ]]>
    </entry>
    <entry key="SELECT_JOB_PARAMETERS_BY_JOB_ID">
        <![CDATA[
        SELECT id,
            job_id,
            create_date,
            update_date,
            created_by,
            updated_by,
            name,
            val_string,
            val_date,
            val_long,
            val_double,
            val_boolean,
            val_arr_string,
            val_arr_date,
            val_arr_long,
            val_arr_double,
            val_arr_boolean
        FROM job_parameter
        WHERE job_id = :job_id
        ]]>
    </entry>
    <entry key="SELECT_JOB_PARAMETERS_BY_JOB_IDS">
        <![CDATA[
        SELECT id,
            job_id,
            create_date,
            update_date,
            created_by,
            updated_by,
            name,
            val_string,
            val_date,
            val_long,
            val_double,
            val_boolean,
            val_arr_string,
            val_arr_date,
            val_arr_long,
            val_arr_double,
            val_arr_boolean
        FROM job_parameter
        WHERE job_id IN (:ids)
        ]]>
    </entry>
    <entry key="UPDATE_JOB_BY_ID">
        <![CDATA[
        UPDATE job
        SET name = ?,
            update_date = ?,
            updated_by = ?,
            enabled = ?,
            cron_expr = ?,
            descr = ?,
            job_name_ref = ?
        WHERE id = ?
        ]]>
    </entry>
    <entry key="UPDATE_JOB_ENABLED_BY_ID">
        <![CDATA[
        UPDATE job
        SET enabled = :enabled
        WHERE id = :id
        ]]>
    </entry>
    <entry key="UPDATE_JOB_ERROR_BY_IDS">
        <![CDATA[
        UPDATE job
        SET error = :error
        WHERE id in (:ids)
        ]]>
    </entry>
    <entry key="SELECT_JOB_INSTANCES_BY_JOB_IDS">
        <![CDATA[
        SELECT job_id,
            job_instance_id
        FROM job_batch_job_instance
        WHERE job_id IN (:ids)
        ORDER BY create_date
        ]]>
    </entry>
    <entry key="SELECT_JOB_LAST_EXECUTION">
        <![CDATA[
        SELECT DISTINCT ON (job_id) job_id,
            job_instance_id
        FROM job_batch_job_instance
        WHERE job_id IN (:ids)
        ORDER BY job_id,
            create_date DESC
        ]]>
    </entry>
    <entry key="SELECT_JOB_CHECK_PARAMS">
        <![CDATA[
        SELECT p.job_id, j.name as job_name,
            j.job_name_ref,
                         count(p.job_id) AS param_count
        FROM job j
            INNER JOIN job_parameter p ON j.id = p.job_id
        WHERE %1$s
        AND j.job_name_ref = :jobNameRef
        AND (
        :jobId::bigint is NULL
        or (:jobId::bigint is NOT NULL AND j.id != :jobId)
        )
        GROUP BY job_name_ref,
        job_id, j.name
        ]]>
    </entry>
    <entry key="SELECT_JOBS_BY_REF_NAME">
        <![CDATA[
        SELECT id, name as job_name
        FROM job
        WHERE
            job_name_ref = :job_name_ref
            and (
                :id::bigint is NULL
                or (:id::bigint is NOT NULL AND id != :id)
            )
        ]]>
    </entry>
    <entry key="DELETE_JOB_PARAMS">
        <![CDATA[
        delete
        from job_parameter
        where job_id = :job_id
        ]]>
    </entry>
    <entry key="DELETE_REMOVED_JOB_PARAMS">
        <![CDATA[
        DELETE
        FROM job_parameter USING
            (SELECT ta.some_number
             FROM
                 (SELECT some_number
                  FROM t_tmp_id
                  WHERE list_id = :list_id_original) ta
                 LEFT OUTER JOIN
                 (SELECT some_number
                  FROM t_tmp_id
                  WHERE list_id = :list_id_to_update) tb ON ta.some_number = tb.some_number
             WHERE tb.some_number IS NULL) AS t
        WHERE job_parameter.id = t.some_number
        ]]>
    </entry>
    <entry key="DELETE_BATCH_JOB_INSTANCE">
        <![CDATA[
        delete
        from job_batch_job_instance
        where job_id = ?
        ]]>
    </entry>
    <entry key="DELETE_JOB">
        <![CDATA[
        delete
        from job
        where id = ?
        ]]>
    </entry>
    <entry key="UPDATE_JOB_TRIGGER_BY_ID">
        <![CDATA[
        UPDATE job_trigger
        SET start_job_id = ?,
            success_rule = ?,
            name = ?,
            description = ?,
            updated_by = ?,
            update_date = ?
        WHERE id = ?
        ]]>
    </entry>
    <entry key="SELECT_JOB_TRIGGERS_BY_ID">
        <![CDATA[
        SELECT id,
            create_date,
            update_date,
            created_by,
            updated_by,
            finish_job_id,
            start_job_id,
            success_rule,
            name,
            description
        FROM job_trigger
        WHERE finish_job_id = :finish_job_id
        ]]>
    </entry>
    <entry key="SELECT_JOB_JOBS_BY_ID_AND_TRIGGER_RULE">
        <![CDATA[
        SELECT start_job_id
        FROM job_trigger
        WHERE finish_job_id = :finish_job_id and success_rule = :success_rule
        ]]>
    </entry>
    <entry key="SELECT_TRIGGER_BY_JOB_ID_TRIGGER_ID">
        <![CDATA[
        SELECT id,
            create_date,
            update_date,
            created_by,
            updated_by,
            finish_job_id,
            start_job_id,
            success_rule,
            name,
            description
        FROM job_trigger
        WHERE finish_job_id = :finish_job_id and id = :id
        ]]>
    </entry>
    <entry key="DELETE_JOB_TRIGGER">
        <![CDATA[
        delete
        from job_trigger
        where finish_job_id = ? and id = ?
        ]]>
    </entry>
    <entry key="SELECT_TRIGGER_BY_TRIGGER_NAME">
        <![CDATA[
        SELECT id,
            create_date,
            update_date,
            created_by,
            updated_by,
            finish_job_id,
            start_job_id,
            success_rule,
            name,
            description
        FROM job_trigger
        WHERE name = :name
        ]]>
    </entry>
    <entry key="DELETE_JOB_TRIGGERS">
        <![CDATA[
        delete
        from job_trigger
        where finish_job_id = ? or start_job_id = ?
        ]]>
    </entry>
    <entry key="UPSERT_JOB_PARAMETER">
        <![CDATA[
        WITH __update AS (
            UPDATE job_parameter SET update_date = :update_date, updated_by = :updated_by,
              val_string = :val_string, val_date = :val_date, val_long = :val_long, val_double = :val_double,
              val_boolean = :val_boolean, val_arr_string = :val_arr_string, val_arr_date = :val_arr_date,
              val_arr_long = :val_arr_long, val_arr_double = :val_arr_double, val_arr_boolean = :val_arr_boolean
            WHERE job_id = :job_id AND name = :name RETURNING id
        ),
                __insert AS (
                    SELECT
                        :job_id::bigint,
                        :name::varchar,
                        now(),
                        :update_date::timestamp,
                        :created_by::varchar,
                        :updated_by::varchar,
                        :val_string::varchar,
                        :val_date::timestamp,
                        :val_long::bigint,
                        :val_double::double precision,
                        :val_boolean::boolean,
                        :val_arr_string::text[],
                        :val_arr_date::timestamp[],
                        :val_arr_long::bigint[],
                        :val_arr_double::double precision[],
                        :val_arr_boolean::boolean[]
                    WHERE NOT EXISTS (SELECT * FROM __update)
            )
        INSERT INTO job_parameter(
            job_id, name, create_date, update_date, created_by, updated_by, val_string, val_date, val_long, val_double, val_boolean,
            val_arr_string, val_arr_date, val_arr_long, val_arr_double, val_arr_boolean
        ) SELECT * FROM __insert
        ]]>
    </entry>
    <entry key="UPSERT_JOB_PARAMETER_9_5_">
        <![CDATA[
        INSERT INTO job_parameter(
            job_id, name, create_date, update_date, created_by, updated_by,
            val_string, val_date, val_long, val_double, val_boolean,
            val_arr_string, val_arr_date, val_arr_long, val_arr_double, val_arr_boolean
        )
        VALUES (
            :job_id, :name, :create_date, :update_date, :created_by, :updated_by,
            :val_string, :val_date, :val_long, :val_double, :val_boolean,
            :val_arr_string::text[],
            :val_arr_date::timestamp[],
            :val_arr_long::bigint[],
            :val_arr_double::double precision[],
            :val_arr_boolean::boolean[]
        )
        ON CONFLICT (job_id, name)
            DO UPDATE SET update_date = :update_date, updated_by = :updated_by, val_string = :val_string, val_date = :val_date,
                val_long = :val_long, val_double = :val_double, val_boolean = :val_boolean,
                val_arr_string = :val_arr_string,
                val_arr_date = :val_arr_date,
                val_arr_long = :val_arr_long,
                val_arr_double = :val_arr_double,
                val_arr_boolean = :val_arr_boolean
        ]]>
    </entry>

    <entry key="SELECT_JOBS_BY_IDS_WITH_PARAMS">
        <![CDATA[
        SELECT
            j.id AS jobId,
            j.name AS jobName,
            j.job_name_ref AS jobNameRef,
            j.create_date AS jobCreateDate,
            j.update_date AS jobUpdateDate,
            j.created_by AS jobCreatedBy,
            j.updated_by AS jobUpdatedBy,
            j.cron_expr AS jobCronExpr,
            j.descr AS jobDescr,
            j.enabled AS jobEnabled,
            j.error AS jobError,
            jp.create_date AS jobParameterCreateDate,
            jp.update_date AS jobParameterUpdateDate,
            jp.created_by AS jobParameterCreatedBy,
            jp.updated_by AS jobParameterUpdatedBy,
            jp.name AS jobParameterName,
            jp.val_string AS jobParameterValString,
            jp.val_date AS jobParameterValDate,
            jp.val_long AS jobParameterValLong,
            jp.val_double AS jobParameterValDouble,
            jp.val_boolean AS jobParameterValBoolean,
            jp.val_arr_string AS jobParameterValArrString,
            jp.val_arr_date AS jobParameterValArrDate,
            jp.val_arr_long AS jobParameterValArrLong,
            jp.val_arr_double AS jobParameterValArrDouble,
            jp.val_arr_boolean AS jobParameterValArrBoolean,
            jp.id AS jobParameterId
        FROM job AS j, job_parameter AS jp WHERE j.id IN (:jobsIds) AND j.id = jp.job_id
        ]]>
    </entry>
    <entry key="SELECT_ALL_JOBS_WITH_PARAMS">
    <![CDATA[
        SELECT
            j.id AS jobId,
            j.name AS jobName,
            j.job_name_ref AS jobNameRef,
            j.create_date AS jobCreateDate,
            j.update_date AS jobUpdateDate,
            j.created_by AS jobCreatedBy,
            j.updated_by AS jobUpdatedBy,
            j.cron_expr AS jobCronExpr,
            j.descr AS jobDescr,
            j.enabled AS jobEnabled,
            j.error AS jobError,
            jp.create_date AS jobParameterCreateDate,
            jp.update_date AS jobParameterUpdateDate,
            jp.created_by AS jobParameterCreatedBy,
            jp.updated_by AS jobParameterUpdatedBy,
            jp.name AS jobParameterName,
            jp.val_string AS jobParameterValString,
            jp.val_date AS jobParameterValDate,
            jp.val_long AS jobParameterValLong,
            jp.val_double AS jobParameterValDouble,
            jp.val_boolean AS jobParameterValBoolean,
            jp.val_arr_string AS jobParameterValArrString,
            jp.val_arr_date AS jobParameterValArrDate,
            jp.val_arr_long AS jobParameterValArrLong,
            jp.val_arr_double AS jobParameterValArrDouble,
            jp.val_arr_boolean AS jobParameterValArrBoolean,
            jp.id AS jobParameterId
        FROM job AS j, job_parameter AS jp WHERE j.id = jp.job_id
        ]]>
    </entry>
</properties>
