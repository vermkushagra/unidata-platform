#
# This ProGuard configuration file illustrates how to process ProGuard itself.
# Configuration files for typical applications will be very similar.
# Usage:
#     java -jar proguard.jar @proguard.pro
#

-verbose

# injars, outjar and libraryjars will be prowided from gradle!

# Allow classes and class members to be made public.
-allowaccessmodification

-adaptresourcefilecontents **.properties,META-INF/MANIFEST.MF,META-INF/spring.*,spring/*

# by http://proguard.sourceforge.net/manual/troubleshooting.html#attributes
# http://midgetontoes.com/blog/2015/06/26/tips-for-using-proguard-with-spring-framework
# http://sourceforge.net/p/proguard/bugs/558/
#-keepattributes **
# My tries minimal enough (SourceFile,LineNumberTable for retracing - http://proguard.sourceforge.net/manual/retrace/examples.html):
-keepattributes SourceFile,SourceDir,LineNumberTable,Signature,Exceptions,LocalVariableTable,RuntimeVisibleAnnotations,RuntimeVisibleParameterAnnotations,AnnotationDefault
-dontshrink
# Required for spring: http://sourceforge.net/p/proguard/bugs/558/
-keepdirectories

# http://midgetontoes.com/blog/2015/06/26/tips-for-using-proguard-with-spring-framework but my list of disables by tries
# http://proguard.sourceforge.net/manual/optimizations.html
-optimizations !class/merging/horizontal,!method/marking/final,!method/removal/parameter
#-dontoptimize

#### Spring related conf:
-keep @org.springframework.transaction.annotation.Transactional class *
-keep @org.springframework.stereotype.* class *
-keep @org.springframework.beans.factory.annotation.Autowired class *
-keep @org.springframework.web.bind.annotation.ResponseBody class *
-keep @org.springframework.web.bind.annotation.RequestMapping class *
-keep @javax.annotation.Resource class *
-keep @org.springframework.cache.annotation.EnableCaching class *
-keep @org.springframework.context.annotation.Configuration class *

-keepclassmembers class * {
    @org.springframework.beans.factory.annotation.* *;
    @org.springframework.context.annotation.Bean *;
    @javax.annotation.PostConstruct *;
    @javax.annotation.PreDestroy *;
    @org.aspectj.lang.annotation.AfterReturning *;
    @org.aspectj.lang.annotation.Pointcut *;
    @org.aspectj.lang.annotation.AfterThrowing *;
    @org.aspectj.lang.annotation.Around *;
}

#### Eclipslink
-keep @javax.persistence.* class *

-keepclassmembers class * {
    @javax.persistence.* *;
}

##################################### Option which break application and must NOT be used: #############################
#1) Allow methods with the same signature, except for the return type, to get the same obfuscation name.
# do NOT use that: http://proguard.sourceforge.net/manual/troubleshooting.html#illegalargumentexception
# we get many Errors like: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'egaisPendingOperationsDaoImpl' defined in URL [jar:file:/opt/servers/apache-tomcat-7.0.57-backend/webapps/portal-api%23%233.15.rc5.6_svn8128_2015.10.16..12.28.14/WEB-INF/lib/core-3.15.rc5.6.proguard.jar!/ru/rlh/egais/portal/backend/dao/impl/EgaisPendingOperationsDaoImpl.class]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: methods with same signature a(java.lang.String) but incompatible return types: [class java.util.UUID, class ru.rlh.egais.portal.api.dto.EgaisPendingOperation]
# -overloadaggressively

#2) Put all obfuscated classes into the nameless root package.
# If it enabled: 2015-10-19 12:25:21,678 [localhost-startStop-1]    [-] [-]                                                 WARN  o.s.web.context.support.XmlWebApplicationContext.refresh:487 - Exception encountered during context initialization - cancelling refresh attempt
#                 org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private r ru.rlh.egais.portal.backend.service.SecurityService.securityDao; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [r] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
# -repackageclasses ''

#3) It must NOT be used: http://stackoverflow.com/questions/19928927/obfuscation-causes-verifyerror-expecting-a-stackmap-frame
#-dontpreverify

##################################### /Option which break application and must NOT be used: ############################

##################################### Keep open API ####################################################################
# Generated classes:
#-keep public class com.unidata.mdm.**
#-keep public class com.unidata.mdm.** { *; }

# Rest & Soap services:
-keep public class com.unidata.mdm.backend.api.**
-keep public class com.unidata.mdm.backend.api.** { *; }

# http://stackoverflow.com/questions/5884287/how-to-keep-class-file-package-info-class-generated-by-jaxb-during-proguard-ob
-keep class com.unidata.mdm.**.package-info
##################################### /Keep open API ###################################################################

##################################### Keep fixes #######################################################################

##################################### /Keep fixes ######################################################################