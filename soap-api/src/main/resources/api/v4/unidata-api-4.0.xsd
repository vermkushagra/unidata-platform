<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:tdapi="http://api.mdm.unidata.com/v4/"
           xmlns:data="http://data.mdm.unidata.com/v4/"
           targetNamespace="http://api.mdm.unidata.com/v4/"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
  		   xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
  		   jaxb:version="2.0"
  		   jaxb:extensionBindingPrefixes="xjc">

    <xs:import schemaLocation="unidata-data-4.0.xsd" namespace="http://data.mdm.unidata.com/v4/"/>

    <xs:element name="apiRequestBody" type="tdapi:UnidataRequestBody" />
    <xs:element name="apiResponseBody" type="tdapi:UnidataResponseBody" />

    
    <xs:annotation>
        <xs:documentation>
Набор элементов и типов для Unidata Soap API;
Точкой входа во все запросы является структура UnidataRequestBody;
Все ответы приходят как структура UnidataResponseBody
        </xs:documentation>        
    </xs:annotation>
    
    <!-- Начало специальных типов данных для тестового XML -->

    <xs:complexType name="SampleDef">
        <xs:annotation>
            <xs:documentation>
Дополнительный тип данных предназначенный для внутреннего тестирования SoapAPI.
Позволяет сформировать произвольный запрос ответ в любом редакторе, поддерживающим проверку XML файла на основе XML Schema
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="requestBody" type="tdapi:UnidataRequestBody" minOccurs="1" maxOccurs="1"/>
            <xs:element name="responseBody" type="tdapi:UnidataResponseBody" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="samples">
        <xs:annotation>
            <xs:documentation>
Дополнительный элемент, предназначенный для внутреннего тестирования SoapAPI.
Позволяет сформировать произвольный набор запрос-ответов, а также событий платформы в любом редакторе, поддерживающим проверку XML файла на основе XML Schema
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:element name="sample" type="tdapi:SampleDef"/>
                <xs:element name="sampleJMSMessage" type="tdapi:UnidataMessageDef"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <!-- Конец специальных типов данных для тестового XML -->

    <!-- Начало специальных типов данных для точки входа в описание сообщений публикуемых платформой  -->

    <xs:simpleType name="UnidataEventType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="Upsert"/>
            <xs:enumeration value="Merge"/>
            <xs:enumeration value="SoftDelete"/>
            <xs:enumeration value="WipeDelete"/>
            <xs:enumeration value="Restore"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="UpsertEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая детали события по изменению записи сущности. Всегда содержит исходную запись, которую затронуло событие, а также пересчитанную основную запись
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="originRecord" type="data:OriginRecord" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Исходная запись, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonRecord" type="data:EtalonRecord" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Основная запись, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="originKey" type="data:OriginKey" />
            <xs:element name="supplementaryKeys" type="data:OriginKey" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значения ключей, связанных с эталоном, который был завтронут в ходе данной операции</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="upsertActionType" type="tdapi:UpsertActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="UpsertEventClassifierDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по изменению записи классификатора. Всегда содержит исходный классификатор, который затронуло событие.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="originRecord" type="data:OriginClassifierRecord" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Исходная запись классификатора, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonRecord" type="data:EtalonClassifierRecord" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Основная запись классификатора, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="owningOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи, идентифицирующего контролирующую классификатор</xs:documentation></xs:annotation></xs:element>
            <xs:element name="owningEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи, идентифицирующего контролирующую классификатор</xs:documentation></xs:annotation></xs:element>
            <xs:element name="originKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа классификатора</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи классификатора</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="upsertActionType" type="tdapi:UpsertActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="UpsertEventRelationDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по добавлению объекта связи к записи.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="1">
                <xs:annotation>
                    <xs:appinfo>
                        <jaxb:property name="record"/>
                    </xs:appinfo>
                </xs:annotation>
                <xs:element name="integralEntity" type="data:IntegralRecord" minOccurs="1" maxOccurs="1"/>
                <xs:element name="relationTo" type="data:RelationTo" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
            <xs:element name="fromOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи 'от'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="fromEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи 'от'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="toOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи 'к'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="toEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи 'к'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="relationType" type="xs:string" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Тип связи</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="upsertActionType" type="tdapi:UpsertActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="SoftDeleteEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по удалению записи сущности. Всегда содержит ключи удаленных записей.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего логически удалённую основную запись</xs:documentation></xs:annotation></xs:element>
            <xs:element name="originKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего логически удалённую исходную запись</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonRecord" type="data:EtalonRecord" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Основная запись, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="supplementaryKeys" type="data:OriginKey" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значения ключей, связанных с эталоном, который был завтронут в ходе данной операции</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="SoftDeleteActionType" type="tdapi:SoftDeleteActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="WipeDeleteEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по физическому удалению записи сущности. Всегда содержит ключи удаленных записей.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего удалённую основную запись</xs:documentation></xs:annotation></xs:element>
            <xs:element name="originKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего удалённую исходную запись</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonRecord" type="data:EtalonRecord" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Основная запись, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="supplementaryKeys" type="data:OriginKey" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значения ключей, связанных с эталоном, который был завтронут в ходе данной операции</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="SoftDeleteClassifierEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по удалению записи классификатора. Всегда содержит ключи удаленного классификатора и ключ соответствующей записи.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="owningOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи, идентифицирующего контролирующую классификатор</xs:documentation></xs:annotation></xs:element>
            <xs:element name="owningEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи, идентифицирующего контролирующую классификатор</xs:documentation></xs:annotation></xs:element>
            <xs:element name="originKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа классификатора</xs:documentation></xs:annotation></xs:element>
            <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи классификатора</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="SoftDeleteActionType" type="tdapi:SoftDeleteActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="SoftDeleteRelationEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по удалению связи.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="fromOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи 'от'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="fromEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи 'от'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="toOriginKey" type="data:OriginKey" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа записи 'к'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="toEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа основной записи 'к'</xs:documentation></xs:annotation></xs:element>
            <xs:element name="relationType" type="xs:string" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Тип связи</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="SoftDeleteActionType" type="tdapi:SoftDeleteActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="RestoreEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
                Структура, описывающая детали события по востановлению записи сущности. Всегда содержит ключ востановленной записи и ее название.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего востановленную запись</xs:documentation></xs:annotation></xs:element>
            <xs:element name="supplementaryKeys" type="data:OriginKey" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значения ключей, связанных с эталоном, который был завтронут в ходе данной операции</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Название сущности востановленной записи</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>


    <xs:complexType name="MergeEventDetailsDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая детали события по консолидации записей сущности. Всегда основную запись, в которую произошла консолидация, а также ключи всех проигравших записей
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="winningEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Основная запись, которую затронуло событие</xs:documentation></xs:annotation></xs:element>
            <xs:element name="looserEtalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значение ключей, идентифицирующих проигравшые основные записи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="supplementaryKeys" type="data:OriginKey" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значения ключей, связанных с эталоном, который был завтронут в ходе данной операции</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>
    
    <xs:complexType name="TimeIntervalDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая временной интервал.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="rangeFrom" type="xs:dateTime" use="required">
            <xs:annotation>
                <xs:documentation>Начало действия данной версии данных. null значит бесконечность в прошлом.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rangeTo" type="xs:dateTime" use="required">
            <xs:annotation>
                <xs:documentation>Окончание действия данной версии данных. null значит бесконечность в будущем.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="UnidataMessageDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая произвольное событие генерируемое платформой на изменение данных.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="1" maxOccurs="1">
            <xs:element name="upsertEventDetails" type="tdapi:UpsertEventDetailsDef"><xs:annotation><xs:documentation>Детали события по изменению записи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="upsertEventClassifierDetails" type="tdapi:UpsertEventClassifierDetailsDef"><xs:annotation><xs:documentation>Детали события по изменению классификатора</xs:documentation></xs:annotation></xs:element>
            <xs:element name="UpsertEventRelationDetailsDef" type="tdapi:UpsertEventRelationDetailsDef"><xs:annotation><xs:documentation>Детали события по изменению связи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="mergeEventDetails" type="tdapi:MergeEventDetailsDef"><xs:annotation><xs:documentation>Детали события по консолидации записей</xs:documentation></xs:annotation></xs:element>
            <xs:element name="softDeleteEventDetails" type="tdapi:SoftDeleteEventDetailsDef"><xs:annotation><xs:documentation>Детали события по удалению записи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="softDeleteClassifierEventDetails" type="tdapi:SoftDeleteClassifierEventDetailsDef"><xs:annotation><xs:documentation>Детали события по удалению классификатора</xs:documentation></xs:annotation></xs:element>
            <xs:element name="softDeleteRelationEventDetails" type="tdapi:SoftDeleteRelationEventDetailsDef"><xs:annotation><xs:documentation>Детали события по удалению связи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="restoreEventDetails" type="tdapi:RestoreEventDetailsDef"><xs:annotation><xs:documentation>Детали события по востановлению записи</xs:documentation></xs:annotation></xs:element>
            <xs:element name="wipeDeleteEventDetails" type="tdapi:WipeDeleteEventDetailsDef"><xs:annotation><xs:documentation>Детали события по физическому удалению записи</xs:documentation></xs:annotation></xs:element>
        </xs:choice>
        <xs:attribute name="eventType" type="tdapi:UnidataEventType" use="required"><xs:annotation><xs:documentation>На данный момент поддерживается два вида событий, в зависимости от которых, содержится один из нижеперечисленных элементов</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="eventDate" type="xs:dateTime" use="required"><xs:annotation><xs:documentation>Фактическая дата события</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="publishDate" type="xs:dateTime" use="required"><xs:annotation><xs:documentation>Дата публикации события в очередь</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string"><xs:annotation><xs:documentation>ID бизнес операции</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <!-- Конец  специальных типов данных для точки входа в описание сообщений публикуемых платформой  -->

    <!-- Начало специальных типов данных для точки входа в описания запросов -->

    <xs:complexType name="UnidataRequestBody">
        <xs:annotation>
            <xs:documentation>
Структура любого API запроса. Состоит из
- обязательной секции 'common', содержащий стандартный набор общих параметров, таких как идентификатор хранилища, безопасность, итд
- одного из конкретных запросов
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="common" type="tdapi:CommonSectionDef" minOccurs="1" maxOccurs="1"/>
            <xs:choice minOccurs="1" maxOccurs="1">
                <xs:element name="requestAuthenticate" type="tdapi:RequestAuthenticate"/>
                <xs:element name="requestGetLookupValues" type="tdapi:RequestGetLookupValues"/>
                <xs:element name="requestCleanse" type="tdapi:RequestCleanse"/>
                <xs:element name="requestUpsert" type="tdapi:RequestUpsert"/>
                <xs:element name="requestRelationsUpsert" type="tdapi:RequestRelationsUpsert"/>
                <xs:element name="requestMerge" type="tdapi:RequestMerge"/>
                <xs:element name="requestJoin" type="tdapi:RequestJoin"/>
                <xs:element name="requestSoftDelete" type="tdapi:RequestSoftDelete"/>
                <xs:element name="requestRelationsSoftDelete" type="tdapi:RequestRelationsSoftDelete"/>
                <xs:element name="requestGet" type="tdapi:RequestGet"/>
                <xs:element name="requestGetAllPeriods" type="tdapi:RequestGetAllPeriods"/>
                <xs:element name="requestRelationsGet" type="tdapi:RequestRelationsGet"/>
                <xs:element name="requestSearch" type="tdapi:RequestSearch"/>
                <xs:element name="requestGetDataQualityErrors" type="tdapi:RequestGetDataQualityErrors"/>
                <!--  
                <xs:element name="requestMetaGetCleanseFunctionDesc" type="tdapi:RequestMetaGetCleanseFunctionDesc"/>
                <xs:element name="requestMetaGetCleanseFunctionList" type="tdapi:RequestMetaGetCleanseFunctionList"/>
                -->
                <xs:element name="requestInfoGet" type="tdapi:RequestInfoGet"/>
                <xs:element name="requestBulkUpsert" type="tdapi:RequestBulkUpsert"/>

                <!-- Jobs -->
                <xs:element name="requestFindAllJobs" type="tdapi:RequestFindAllJobs"/>
                <xs:element name="requestSaveJob" type="tdapi:RequestSaveJob"/>
                <xs:element name="requestRemoveJob" type="tdapi:RequestRemoveJob"/>
                <xs:element name="requestFindJob" type="tdapi:RequestFindJob"/>
                <xs:element name="requestRunJob" type="tdapi:RequestRunJob"/>
                <xs:element name="requestJobStatus" type="tdapi:RequestJobStatus"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="UnidataResponseBody">
        <xs:annotation>
            <xs:documentation>
Структура любого API ответа. Состоит из
- обязательной секции 'common', содержащий стандартный набор общих данных, таких как код ошибки, итд
- одного из конкретных ответов
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="common" type="tdapi:CommonResponseDef"/>
            <xs:choice minOccurs="0" maxOccurs="1">
                <xs:element name="responseAuthenticate" type="tdapi:ResponseAuthenticate"/>
                <xs:element name="responseGetLookupValues" type="tdapi:ResponseGetLookupValues"/>
                <xs:element name="responseCleanse" type="tdapi:ResponseCleanse"/>
                <xs:element name="responseUpsert" type="tdapi:ResponseUpsert"/>
                <xs:element name="responseRelationsUpsert" type="tdapi:ResponseRelationsUpsert"/>
                <xs:element name="responseMerge" type="tdapi:ResponseMerge"/>
                <xs:element name="responseJoin" type="tdapi:ResponseJoin"/>
                <xs:element name="responseSoftDelete" type="tdapi:ResponseSoftDelete"/>
                <xs:element name="responseRelationsSoftDelete" type="tdapi:ResponseRelationsSoftDelete"/>
                <xs:element name="responseGet" type="tdapi:ResponseGet"/>
                <xs:element name="responseGetAllPeriods" type="tdapi:ResponseGetAllPeriods"/>
                <xs:element name="responseRelationsGet" type="tdapi:ResponseRelationsGet"/>
                <xs:element name="responseSearch" type="tdapi:ResponseSearch"/>
                <xs:element name="responseGetDataQualityErrors" type="tdapi:ResponseGetDataQualityErrors"/>
                <!--  
                <xs:element name="responseMetaGetCleanseFunctionDesc" type="tdapi:ResponseMetaGetCleanseFunctionDesc"/>
                <xs:element name="responseMetaGetCleanseFunctionList" type="tdapi:ResponseMetaGetCleanseFunctionList"/>
                -->
                <xs:element name="responseInfoGet" type="tdapi:ResponseInfoGet"/>
                <xs:element name="responseBulkUpsert" type="tdapi:ResponseBulkUpsert"/>

                <!-- Jobs -->
                <xs:element name="responseFindAllJobs" type="tdapi:ResponseFindAllJobs"/>
                <xs:element name="responseSaveJob" type="tdapi:ResponseSaveJob"/>
                <xs:element name="responseRemoveJob" type="tdapi:ResponseRemoveJob"/>
                <xs:element name="responseFindJob" type="tdapi:ResponseFindJob"/>
                <xs:element name="responseRunJob" type="tdapi:ResponseRunJob"/>
                <xs:element name="responseJobStatus" type="tdapi:ResponseJobStatus"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Конец специальных типов данных для точки входа в описания запросов -->

    <xs:complexType name="CredentialsDef">
        <xs:annotation>
            <xs:documentation>
                Составная часть любого API запроса. Позволяет задать пользователя и пароль.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="externalToken" type="xs:string"/>
        </xs:sequence>
        <xs:attribute name="username" type="xs:string"/>
        <xs:attribute name="password" type="xs:string"/>
    </xs:complexType>


    <xs:complexType name="AsyncSectionDef">
        <xs:annotation>
            <xs:documentation>
Составная часть любого API запроса. Позволяет задать параметры асинхронного вызова.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="useJMS" type="xs:boolean" default="false"><xs:annotation><xs:documentation>Указать, что ответ должен быть доставлен через JMS. В противном случае нужно воспользоваться запросом RequestGetAsyncResults</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="jmsReplyTo" type="xs:string"><xs:annotation><xs:documentation>JNDI имя JMS очереди, в которую нужно опубликовать результат исполнения</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="jmsCorrelationId" type="xs:string"><xs:annotation><xs:documentation>Идентификатор запроса по которому можно будет идентифицировать запрос в JMS очереди</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="SecuritySectionDef">
        <xs:annotation>
            <xs:documentation>
Общая часть любого API запроса. Содержащий данные для аутентификации пользователя. Есть возможность работать в двух режимах.
Первый всегда передавать имя пользователя и пароль (элемент 'credentials'). При этом серверная сторона будет всегда создавать новую сессию со всеми вытекающими издержками.
Второй способ передавать сессионый токен, который может быть получен после успешного исполнения сервиса RequestAuthenticate в режиме doLogin='true'. Это рекомендованный подход, когда вызывающая сторона заведомо знает о необходимости выполнить последовательность API запросов
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="1" maxOccurs="1">
            <xs:element name="credentials" type="tdapi:CredentialsDef"/>
            <xs:element name="sessionToken" type="tdapi:SessionTokenDef"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="CommonSectionDef">
        <xs:annotation>
            <xs:documentation>
Общая часть любого API запроса. Состоит из двух основных частей - параметры безопасности и параметры асинхронного вызова.
Помимо этого, содержит обязательный параметр 'storageId', идентифицирующий логическое хранилище.
Также, есть возможность предоставить опциональный параметр - идентификатор логической операции. Если идентификатор не предоставлен,
то платформа автоматически сгенерирует новое уникальное значение. Идентификатор логических операций используется для аудита, а также для контроля композитных операций
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="security" type="tdapi:SecuritySectionDef" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Обязательный элемент, содержащий данные для аутентификации пользователя</xs:documentation></xs:annotation></xs:element>
            <xs:element name="asyncOptions" type="tdapi:AsyncSectionDef" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Опциональный элемент, содержащий параметры асинхронного вызова</xs:documentation></xs:annotation></xs:element>
        </xs:sequence>
        <xs:attribute name="version" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр, версия API клиента</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="storageId" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр, идентифицирующий логическое хранилище</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр, идентифицирующий логическую операцию. Если идентификатор не предоставлен, то платформа автоматически сгенерирует новое уникальное значение. Данный идентификатор используется для аудита, а также для контроля композитных операций</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="CommonResponseDef">
        <xs:annotation>
            <xs:documentation>
Общая часть любого API ответа:
- Всегда содержит идентификатор логической операции, либо изначально переданный в запросе, либо авто-сгенерированный платформой.
- Всегда содержит 'exitCode', который должен использоваться вызывающей стороной для анализа ошибок
- Может содержать несколько элементов с сообщениями. В случае 'exitCode' отличного от 'Success', будет как минимум один такой элемент
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="1">
            <xs:element name="message" type="tdapi:ExecutionMessageDef"><xs:annotation><xs:documentation>Опциональные сообщения, переданные вместе с ответом. В случае ошибок или предупреждений, содержат текст для отображения пользователю, а также технические детали</xs:documentation></xs:annotation></xs:element>
        </xs:choice>
        <xs:attribute name="version" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр, версия API сервера</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="platform" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр, версия платформы</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="operationId" type="xs:string" use="required"><xs:annotation><xs:documentation>идентификатор логической операции, либо изначально переданный в запросе, либо авто-сгенерированный платформой</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="exitCode" type="tdapi:ExitCodeType" use="required"><xs:annotation><xs:documentation>Результирующий код исполнения запроса</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="processingTime" type="xs:int" use="required">
        <xs:annotation><xs:documentation>Время исполнения запроса на стороне сервера в миллисекундах.</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="ExecutionErrorDef">
        <xs:annotation>
            <xs:documentation>
Детальное описание ошибки исполнения запроса - включает код ошибки, сообщение для пользователя, а также техническое сообщение для службы поддержки
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="errorCode" type="xs:string" use="required"/>
        <xs:attribute name="userMessage" type="xs:string" use="required"/>
        <xs:attribute name="internalMessage" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="ExecutionMessageDef">
        <xs:annotation>
            <xs:documentation>
Структура любого сообщение возвращаемого вместе с ответом на запрос. Всегда содержит текст сообщения в поле 'messageText'. Также может содержать структуры,
описывающие ошибку, включая детальные сообщения от сервера
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="stackTrace" type="xs:string" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Необязательный элемент содержащий Java stack-trace. Заполняется для службы поддержки</xs:documentation></xs:annotation></xs:element>
            <xs:element name="error" type="tdapi:ExecutionErrorDef" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Необязательный элемент содержащий детальное описание ошибки</xs:documentation></xs:annotation></xs:element>
            <xs:element name="dqErrors" type="data:DataQualityError" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Необязательный элемент содержащий описание ошибок правил качества.</xs:documentation></xs:annotation></xs:element>
        </xs:choice>
        <xs:attribute name="messageText" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:simpleType name="ExitCodeType">
        <xs:annotation>
            <xs:documentation>
Перечисление возможных кодов возврата. Нормальное исполнение запроса подразумевает код 'Success' или 'Warning'.
Все остальные относятся к ошибкам и требует соответствующей обработки со стороны вызывающей стороны
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Success"/>
            <xs:enumeration value="Error"/>
            <xs:enumeration value="Warning"/>
            <xs:enumeration value="AuthenticationError"/>
            <xs:enumeration value="AuthorizationError"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="UpsertActionType">
        <xs:annotation>
            <xs:documentation>
Перечисление возможных типов действия, совершённых 'upsert' API. Позволяет различить операции вставки, изменения как основной сущности, так и соответсвующих исходных записей
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Insert"/>
            <xs:enumeration value="Update"/>
            <xs:enumeration value="UpsertOrigin"/>
            <xs:enumeration value="NoAction"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="SoftDeleteActionType">
        <xs:annotation>
            <xs:documentation>
                Перечисление возможных типов действия, совершённых 'SoftDelete'. Позволяет различить операции удаления записи, периода
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="SoftDeleteEtalon"/>
            <xs:enumeration value="SoftDeleteOrigin"/>
            <xs:enumeration value="SoftDeleteEtalonPeriod"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="SessionTokenDef">
        <xs:annotation>
            <xs:documentation>
Структура описывающая сессионный токен. Представляет собой произвольный набор символов. Используется для передачи ключа сессии между запросами.
В типовом сценарии использования, данный ключ возвращается к ответе на запрос 'RequestAuthenticate' и потом передаётся во все последующие запросы.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="token" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="RoleRefDef">
        <xs:annotation>
            <xs:documentation>
Структура описывающая роль из модели безопаснасти. На данный момент содержит только имя роли.
В типовом сценарии использования, список ролей пользователя возвращается к ответе на запрос 'RequestAuthenticate'.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательное имя роли</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:simpleType name="CompareOperatorType">
        <xs:annotation>
            <xs:documentation>
Перечисление возможных видов операторов сравнения. Используется для формирования условий поиска сущности в запросе 'RequestSearch'
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="EQUALS"/>
            <xs:enumeration value="NOT_EQUALS"/>
            <xs:enumeration value="GREATER"/>
            <xs:enumeration value="GREATER_OR_EQUALS"/>
            <xs:enumeration value="LESS"/>
            <xs:enumeration value="LESS_OR_EQUALS"/>
            <xs:enumeration value="LIKE"/>
            <xs:enumeration value="FUZZY_EQUALS"/>
        </xs:restriction>
    </xs:simpleType>
	
	<!-- Base for search expressions. -->
	<xs:complexType name="SearchBaseDef"/>
	
	<xs:complexType name="SearchAndDef">
		<xs:annotation>
            <xs:documentation>
And element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
        	<xs:extension base="tdapi:SearchBaseDef">
        		<xs:sequence>
  					<xs:choice maxOccurs="unbounded">
  						<xs:annotation>
							<xs:appinfo>
								<jaxb:property name="expressions"/>
							</xs:appinfo>
						</xs:annotation>
					    <xs:element name="and" type="tdapi:SearchAndDef"/>
					    <xs:element name="or" type="tdapi:SearchOrDef"/>
					    <xs:element name="atom" type="tdapi:SearchAtomDef"/>
					</xs:choice>
  				</xs:sequence>	      		
        	</xs:extension>
        </xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="SearchOrDef">
		<xs:annotation>
            <xs:documentation>
Or element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
        	<xs:extension base="tdapi:SearchBaseDef">
  				<xs:sequence>
  					<xs:choice maxOccurs="unbounded">
  						<xs:annotation>
							<xs:appinfo>
								<jaxb:property name="expressions"/>
							</xs:appinfo>
						</xs:annotation>
					    <xs:element name="and" type="tdapi:SearchAndDef"/>
					    <xs:element name="or" type="tdapi:SearchOrDef"/>
					    <xs:element name="atom" type="tdapi:SearchAtomDef"/>
					</xs:choice>
  				</xs:sequence>	      		
        	</xs:extension>
        </xs:complexContent>
	</xs:complexType>
	
    <xs:complexType name="SearchAtomDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая условия поиска на конкретный атрибут сущности. Используется для формирования условий поиска сущности в запросе 'RequestSearch'.
Всегда состоит из имени атрибута, оператора сравнения и константы.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
        	<xs:extension base="tdapi:SearchBaseDef">
        		<xs:attribute name="attributeName" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательное имя атрибута</xs:documentation></xs:annotation></xs:attribute>
        		<xs:attribute name="operator" type="tdapi:CompareOperatorType" use="required"><xs:annotation><xs:documentation>Обязательный оператор сравнения</xs:documentation></xs:annotation></xs:attribute>
        		<xs:attribute name="constant" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательное значение константы</xs:documentation></xs:annotation></xs:attribute>
        	</xs:extension>
        </xs:complexContent>        
    </xs:complexType>
    
    <xs:complexType name="SearchConditionDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая условия поиска сущностей. Используется для формирования условий поиска сущности в запросе 'RequestSearch'.
Является точкой входа при описании условий поиска - задаёт начальную группировку либо через логическое 'И', либо 'ИЛИ', либо как простой одиночный атом - условие
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
        	<xs:choice maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<jaxb:property name="expression"/>
					</xs:appinfo>
				</xs:annotation>
		    	<xs:element name="and" type="tdapi:SearchAndDef"/>
		    	<xs:element name="or" type="tdapi:SearchOrDef"/>
		    	<xs:element name="atom" type="tdapi:SearchAtomDef"/>
			</xs:choice>	        
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="UpsertRelationOverrideDef">
        <xs:annotation>
            <xs:documentation>
Элемент описывающий правила автоматического удаления неактуальных связей между сущностями.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="range" type="tdapi:TimeIntervalDef" maxOccurs="1" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="UpsertRelationsDef">
        <xs:annotation>
            <xs:documentation>
Вспомогательная структура содержащая информацию о связях данной сущности. Состоит из набора обычных связей к другим сущностям ('relationTo'), а также набора неотделимых сущностей ('integralEntity')
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="relation" type="tdapi:UpsertRelationDef" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="UpsertRelationRecordDef">
        <xs:annotation>
            <xs:documentation>
Контейнер для одиночных связей.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="1">
                <xs:annotation>
                    <xs:appinfo>
                        <jaxb:property name="record"/>
                    </xs:appinfo>
                </xs:annotation>
                <xs:element name="integralEntity" type="data:IntegralRecord" minOccurs="1" maxOccurs="1"/>
                <xs:element name="relationTo" type="data:RelationTo" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
            <xs:element name="range" type="tdapi:TimeIntervalDef"/>
            <xs:element name="referenceAliasKey" type="tdapi:ReferenceAliasKey" nillable="true"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ReferenceAliasKey">
        <xs:annotation>
            <xs:documentation>
                Объет мапинга, необходимый для уведомления системы о том , что связь ссылается на альтернативный ключ в реестре.
                Используется в только с RelationTo объектами.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="value"/>
        <xs:attribute type="xs:string" name="entityAttributeName"/>
    </xs:complexType>

    <xs:complexType name="UpsertRelationDef">
        <xs:annotation>
            <xs:documentation>
Набор связей одного определенного типа.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="record" type="tdapi:UpsertRelationRecordDef" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jaxb:property name="records"/>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="override" type="tdapi:UpsertRelationOverrideDef" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>        
        <xs:attribute name="name" use="required"/>
    </xs:complexType>

    <xs:complexType name="DeleteRelationsDef">
        <xs:annotation>
            <xs:documentation>
Вспомогательная структура содержащая информацию о связях данной сущности.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="relation" type="tdapi:DeleteRelationDef" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="DeleteRelationDef">
        <xs:annotation>
            <xs:documentation>
Набор ключей to (правая сторона) одного определенного типа (origin или etalon) для одной определенной связи.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
	        <xs:element name="key" type="tdapi:DeleteRelationRecordDef" minOccurs="0" maxOccurs="unbounded">
	           <xs:annotation>
                    <xs:appinfo>
                        <jaxb:property name="keys"/>
                    </xs:appinfo>
                </xs:annotation>
	        </xs:element>
        </xs:sequence>
        <xs:attribute name="name" use="required"/>
    </xs:complexType>

    <xs:complexType name="DeleteRelationRecordDef">
        <xs:annotation>
            <xs:documentation>
Контейнер для одиночных связей.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="1">
                <xs:element name="originKey" type="data:OriginKey" minOccurs="1" maxOccurs="1"/>
                <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
            <xs:element name="range" type="tdapi:TimeIntervalDef"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="LookupEntityRefDef">
        <xs:annotation>
            <xs:documentation>
Структура, описывающая ссылку на справочник. Используется в запросе 'RequestGetLookupValues'. Состоит из имени справочника и опционального значения конкретного кода. Если код не передан, то ссылка идентифицирует все основные справочника
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр - имя справочника</xs:documentation></xs:annotation></xs:attribute>
        <xs:attribute name="codeValue" type="xs:string" use="optional"><xs:annotation><xs:documentation>Опциональный параметр - значение кода справочника (поле ), для которого нужно вернуть все остальные поля. Если не передан, то возвращаются все значения справочника</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>

    <xs:complexType name="UnidataAbstractRequest"/>
    <xs:complexType name="UnidataAbstractResponse"/>

    <!-- Аутентификация запрос-ответ -->

    <xs:complexType name="RequestAuthenticate">
        <xs:annotation>
            <xs:documentation>
Запрос на аутентификацию пользователя.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Есть возможность идентифицировать пользователя двумя способами. Первый всегда по имени пользователя и паролю (элемент 'credentials' общей секции).
Второй способ передать сессионый токен, если данная сессия всё ещё активна, то сервер 'обновит' сессию и вернёт ответ как будто были переданы правильные имя и пароль пользователя.
По умолчанию сервер всегда создаёт новую сессию. Если нужно только проверить имя пользователя и пароль или получить список ролей пользователя, то можно использовать режим doLogin='false'. При этом новая сессия не создаётся.
Ответ сервера, при успешной аутентификации, всегда содержит список ролей пользователя. Также, в случае создании новой сессии, ответ содержит сессионный токен, который может быть использован для исполнения последующих запросов.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:attribute name="doLogin" type="xs:boolean" use="required"><xs:annotation><xs:documentation>Указание серверу создать новую сессию. Значение по умолчанию - 'true'</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseAuthenticate">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на аутентификацию пользователя ('RequestAuthenticate').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Содержит список ролей пользователя. Признак администратора. Также может содержать сессионный токен, в случае если запрос был сформирован в режиме doLogin='true'
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="sessionToken" type="tdapi:SessionTokenDef" minOccurs="0" maxOccurs="1"><xs:annotation><xs:documentation>Опциональное значение сессионого токена</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="role" type="tdapi:RoleRefDef" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Роль пользователя</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="isAdmin" type="xs:boolean" use="required"><xs:annotation><xs:documentation>Признак того, что пользователь является администратором'</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Получить данные lookup сущностей запрос-ответ -->

    <xs:complexType name="RequestGetLookupValues">
        <xs:annotation>
            <xs:documentation>
Запрос на получение деталей справочника.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Можно запрашивать как все записи справочника, так и конкретную запись идентифицированную значением кода.
Для всех справочников всегда определён кодовый атрибут, содержащий уникальные идентификаторы, например трёхбуквенный код странны для справочника стран
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element name="lookupEntity" type="tdapi:LookupEntityRefDef" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Ссылка на справочник, для которого нужно вернуть значения</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseGetLookupValues">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение деталей справочника ('RequestGetLookupValues').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Содержит список либо всех записей справочника, либо конкретных если в запросе было указано значение кода
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="etalonRecord" type="data:EtalonRecord"><xs:annotation><xs:documentation>Запись справочника</xs:documentation></xs:annotation></xs:element>
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Cleanse запрос-ответ -->

    <xs:complexType name="RequestCleanse">
        <xs:annotation>
            <xs:documentation>
Запрос на исполнение функции очистки данных.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Запрос обязательно содержит полное имя функции очистки данных, включающее имена групп разделённые точкой. Например 'Строковые.УбратьПробелы'
Помимо этого требуется указать значение всех 'входных' портов функции.
Ответ будет содержать значение всех 'выходных' портов функции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element name="port" type="data:SimpleAttribute" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значение 'входного' порта функции</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="cleanseName" type="xs:string" use="required"><xs:annotation><xs:documentation>Обязательный параметр - полное имя функции очистки данных, включающее имена групп разделённые точкой. Например 'Строковые.УбратьПробелы'</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseCleanse">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на исполнение функции очистки данных ('RequestCleanse').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Ответ содержит значение всех 'выходных' портов функции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                    <xs:element name="port" type="data:SimpleAttribute" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значение 'выходного' порта функции</xs:documentation></xs:annotation></xs:element>
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Upsert запрос-ответ -->
    <xs:complexType name="RequestUpsert">
        <xs:annotation>
            <xs:documentation>
                Запрос на вставку или модификацию основной или исходной записи сущности.
                Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из
                структуры 'UnidataRequestBody').

                'upsert' означает комбинацию слов 'update' и 'insert'.

                Все операции по модификации данных производятся над исходными записями сущностей из конкретной системы
                источника, включая служебную систему источник.
                При этом основная запись сущности вычисляется заново как результат консолидации всех исходных записей.

                Имеется возможность передать либо основную запись сущности (элемент 'etalonRecord'), либо исходную
                запись (элемент 'originRecord').
                При передаче основной записи, платформа подберёт соответствующую исходную запись из служебной системы
                источника и
                обеспечит выигрыш соответствующих значений атрибутов при консолидации.
                Любая из переданных записей содержит ключ, на основе значения которого принимается решение будет ли это
                операция вставки или изменения.

                По умолчанию, к любой основной записи применяются все имеющиеся правила контроля качества данных.
                Вызывающая сторона может принудительно отказаться от применения правил, передав skipCleanse='true'
                В случае операции изменения записи, есть возможность передать выборочный набор атрибутов. Все
                непереданные атрибуты остаются без изменений.

                Поле range указывает границы действия версии данных. Отсутствующие значения означают бесконечность в
                прошлом или будущем или их комбинацию. Отсутствующий элемент означает бесконечность с обоих концов.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonRecord" type="data:EtalonRecord">
                            <xs:annotation>
                                <xs:documentation>Запись основной сущности, включая идентифицирующий ключ</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="originRecord" type="data:OriginRecord">
                            <xs:annotation>
                                <xs:documentation>Запись исходной сущности, включая идентифицирующий ключ</xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:choice>
                    <xs:element name="relations" type="tdapi:UpsertRelationsDef" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="relationsDelete" type="tdapi:DeleteRelationsDef" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="range" type="tdapi:TimeIntervalDef" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="aliasCodeAttributePointers" type="tdapi:AliasCodeAttributePointerDef" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="classifierPointers" type="tdapi:ClassifierPointerDef" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>
                            Имя сущности, в которую приизводится вставка.
                            В случае, если вставляется НОВАЯ эталонная запись (от имени специальной системы источника) и параметр не указан, вставка будет отклонена.
                            Для ориджин записей должен быть указан полный ключ!</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="lastUpdateDate" type="xs:dateTime" use="optional">
                    <xs:annotation>
                        <xs:documentation>
                            Опциональный параметр задающий дату последнего изменения исходной записи.
                            Если не передан, то платформа будет использовать текущую дату
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="skipCleanse" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Принудительно отказаться от применения правил контроля качества
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="mergeWithPreviousVersion" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Обоготить данные записи, данными преведущей версии от этой же системы источника
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="bypassExtensionPoints" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Пропустить вызовы пользовательского кода, назначенного на различные точки расширения функционала
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="ResponseUpsert">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос на вставку или модификацию основной или исходной записи сущности ('RequestUpsert').
                Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
                В случае успешного исполнения всегда содержит два ключа, один идентифицирующий исходную запись, фактически изменённую, второй идентифицирующий основную запись сущности.
                Помимо этого возращается тип действия, фактически выполненного платформой - 'action'.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="originKey" type="data:OriginKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="originAction" type="tdapi:UpsertActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <!-- Upsert запрос-ответ -->
    <xs:complexType name="RequestBulkUpsert">
        <xs:annotation>
            <xs:documentation>
                Запрос на множественную вставку или модификацию основной или исходной записи сущности.
                Документацию о единичной вставке в ('RequestUpsert')
           </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element name="upsertRecordRequests" type="tdapi:RequestUpsert" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseBulkUpsert">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос на множественную вставку или модификацию основной или исходной записи сущности ('BulkRequestUpsert').
                Документацию об ответе при единичной вставке в ('ResponseUpsert')
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="upsertRecordResponses" type="tdapi:ResponseUpsert" minOccurs="1" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Upsert запрос-ответ -->
    <xs:complexType name="RequestRelationsUpsert">
        <xs:annotation>
            <xs:documentation>
Запрос на вставку или модификацию основной или исходной записи сущности.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

'upsert' означает комбинацию слов 'update' и 'insert'.

Все операции по модификации данных производятся над исходными записями сущностей из конкретной системы источника, включая служебную систему источник.
При этом основная запись сущности вычисляется заново как результат консолидации всех исходных записей.

Имеется возможность передать либо основную запись сущности (элемент 'etalonRecord'), либо исходную запись (элемент 'originRecord'). 
При передаче основной записи, платформа подберёт соответствующую исходную запись из служебной системы источника и
обеспечит выигрыш соответствующих значений атрибутов при консолидации. 
Любая из переданных записей содержит ключ, на основе значения которого принимается решение будет ли это операция вставки или изменения.

По умолчанию, к любой основной записи применяются все имеющиеся правила контроля качества данных. Вызывающая сторона может принудительно отказаться от применения правил, передав skipCleanse='true'
В случае операции изменения записи, есть возможность передать выборочный набор атрибутов. Все непереданные атрибуты остаются без изменений.

Поле range указывает границы действия версии данных. Отсутствующие значения означают бесконечность в прошлом или будущем или их комбинацию. Отсутствующий элемент означает бесконечность с обоих концов.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice maxOccurs="1" minOccurs="1">
	                    <xs:element name="originKey" type="data:OriginKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего исходную запись (левый конец связи)</xs:documentation></xs:annotation></xs:element>
	                    <xs:element name="etalonKey" type="data:EtalonKey" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего основную запись (левый конец связи)</xs:documentation></xs:annotation></xs:element>
	                </xs:choice>
                    <xs:element name="relations" type="tdapi:UpsertRelationsDef" minOccurs="1" maxOccurs="1">
                        <xs:annotation><xs:documentation>Правые концы связей и временные интервалы.</xs:documentation></xs:annotation>
                    </xs:element>
                    <xs:element name="range" type="tdapi:TimeIntervalDef" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="lastUpdateDate" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Опциональный параметр задающий дату последнего изменения исходной записи. Если не передан, то платформа будет использовать текущую дату</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="skipCleanse" type="xs:boolean" use="optional" default="false"><xs:annotation><xs:documentation>Принудительно отказаться от применения правил контроля качества</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="bypassExtensionPoints" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Пропустить вызовы пользовательского кода, назначенного на различные точки расширения функционала</xs:documentation>
                    </xs:annotation>
                </xs:attribute>                
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="ResponseRelationsUpsert">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на вставку или модификацию основной или исходной записи сущности ('RequestRelationsUpsert').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
В случае успешного исполнения всегда содержит два ключа, один идентифицирующий исходную запись, фактически изменённую, второй идентифицирующий основную запись сущности.
Помимо этого возращается тип действия, фактически выполненного платформой - 'action'.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="upsertCount" type="xs:int" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Количество вставленных записей</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="originAction" type="tdapi:UpsertActionType" use="required"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Upsert запрос-ответ -->
    <xs:complexType name="RequestUpsertList">
        <xs:annotation>
            <xs:documentation>
Запрос на вставку или модификацию основной или исходной записи сущности.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

'upsert' означает комбинацию слов 'update' и 'insert'.

Все операции по модификации данных производятся над исходными записями сущностей из конкретной системы источника, включая служебную систему источник.
При этом основная запись сущности вычисляется заново как результат консолидации всех исходных записей.

Имеется возможность передать либо основную запись сущности (элемент 'etalonRecord'), либо исходную запись (элемент 'originRecord'). 
При передаче основной записи, платформа подберёт соответствующую исходную запись из служебной системы источника и
обеспечит выигрыш соответствующих значений атрибутов при консолидации. 
Любая из переданных записей содержит ключ, на основе значения которого принимается решение будет ли это операция вставки или изменения.

По умолчанию, к любой основной записи применяются все имеющиеся правила контроля качества данных. Вызывающая сторона может принудительно отказаться от применения правил, передав skipCleanse='true'
В случае операции изменения записи, есть возможность передать выборочный набор атрибутов. Все непереданные атрибуты остаются без изменений.

Поле range указывает границы действия версии данных. Отсутствующие значения означают бесконечность в прошлом или будущем или их комбинацию. Отсутствующий элемент означает бесконечность с обоих концов.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice maxOccurs="1">
                        <xs:element name="etalonRecords" type="data:EtalonRecord" maxOccurs="unbounded" minOccurs="1"><xs:annotation><xs:documentation>Запись основной сущности, включая идентифицирующий ключ</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="originRecords" type="data:OriginRecord" maxOccurs="unbounded" minOccurs="1"><xs:annotation><xs:documentation>Запись исходной сущности, включая идентифицирующий ключ</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                    <xs:element name="range" type="tdapi:TimeIntervalDef" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="lastUpdateDate" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Опциональный параметр задающий дату последнего изменения исходной записи. Если не передан, то платформа будет использовать текущую дату</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="skipCleanse" type="xs:boolean" use="optional" default="false"><xs:annotation><xs:documentation>Принудительно отказаться от применения правил контроля качества</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="bypassExtensionPoints" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Пропустить вызовы пользовательского кода, назначенного на различные точки расширения функционала</xs:documentation>
                    </xs:annotation>
                </xs:attribute>                
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="ResponseUpsertList">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на вставку или модификацию основной или исходной записи сущности ('RequestUpsert').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
В случае успешного исполнения всегда содержит два ключа, один идентифицирующий исходную запись, фактически изменённую, второй идентифицирующий основную запись сущности.
Помимо этого возращается тип действия, фактически выполненного платформой - 'action'.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:choice maxOccurs="1">
	                    <xs:element name="originKeys" type="data:OriginKey" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
	                    <xs:element name="etalonKeys" type="data:EtalonKey" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Обязательное значение ключа идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                    <xs:element name="originActions" type="tdapi:UpsertActionType" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Тип действия, фактически выполненного платформой</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Merge запрос-ответ -->
    <xs:complexType name="RequestMerge">
        <xs:annotation>
            <xs:documentation>
Запрос на консолидацию нескольких основных записей сущности.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

Любая консолидация всегда производится над основными записями сущности, но при этом у пользователя есть возможность идентификации основной записи ключом от исходной записи из системы источника
Запрос всегда содержит один ключ, идентифицирующий выигрывающую запись и несколько ключей проигравших записей.

По умолчанию, к консолидированной записи применяются все имеющиеся правила контроля качества данных. Вызывающая сторона может принудительно отказаться от применения правил, передав skipCleanse='true'
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="masterEtalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего выигрывшую основную запись</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="masterOriginKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего выигрывшую исходную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                    <xs:choice minOccurs="1" maxOccurs="unbounded">
                        <xs:element name="duplicateEtalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего проигравшую основную запись</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="duplicateOriginKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего проигравшую исходную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности, для записей которой производится консолидации</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="skipCleanse" type="xs:boolean" use="optional" default="false"><xs:annotation><xs:documentation>Принудительно отказаться от применения правил контроля качества</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="bypassExtensionPoints" type="xs:boolean" use="optional" default="false"><xs:annotation><xs:documentation>Пропустить вызовы пользовательского кода, назначенного на различные точки расширения функционала</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseMerge">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на консолидацию нескольких основных записей сущности ('RequestMerge').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Ответ не содержит никаких специфических параметров. Вызывающая сторона должна ориентироваться на код возврата из общей секции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Merge запрос-ответ -->
    <xs:complexType name="RequestJoin">
        <xs:annotation>
            <xs:documentation>
Запрос на добавление внешнего ID к cуществующему etalonId.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего существующую запись</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение внешнего ключа, который должен быть добавлен</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseJoin">
        <xs:annotation>
            <xs:documentation>
Ответ на Запрос на добавление внешнего ID к cуществующему etalonId.
Ответ не содержит никаких специфических полей. Вызывающая сторона должна ориентироваться на код возврата из общей секции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse"/>
        </xs:complexContent>
    </xs:complexType>

    <!-- SoftDeleteEntity запрос-ответ -->
    <xs:complexType name="RequestSoftDelete">
        <xs:annotation>
            <xs:documentation>
                Запрос на логическое удаление основной записи сущности, исходной записи сущности или ее отдельного
                периода.
                Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из
                структуры 'UnidataRequestBody').
                Логическое удаление позволяет пометить либо исходную запись из конкретной системы источника, либо
                основную запись, как логически удалённую, при этом такие записи выпадают из обычных операции, таких как
                поиск.
                При логическом удалении одной исходной записи из конкретной системы источника, основная запись может
                продолжать оставаться активной, если в её составе есть другие активные исходные записи.

                Поле range указывает границы действия НЕАКТИВНОЙ (удаленной) версии данных для указанного источника,
                которая будет создана в результате запроса, если речь идет о деактивации периода.
                Отсутствующие значения означают бесконечность в прошлом или будущем или их комбинацию.
                Тип удаления указывается в поле actionType.
                При наличии прав запрос может содержать значение true в поле wipe. В этом случае запись будет ФИЗИЧЕСКИ
                и БЕЗВОЗВРАТНО удалена из хранилищи (hard delete).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonKey" type="data:EtalonKey">
                            <xs:annotation>
                                <xs:documentation>Значение ключа, идентифицирующего основную запись, для которой
                                    приизводится логическое удаление
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="originKey" type="data:OriginKey">
                            <xs:annotation>
                                <xs:documentation>Значение ключа, идентифицирующего исходную запись, для которой
                                    приизводится логическое удаление
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:choice>
                    <xs:element name="range" type="tdapi:TimeIntervalDef" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="actionType" type="tdapi:SoftDeleteActionType" use="required"/>
                <xs:attribute name="wipe" type="xs:boolean" use="optional">
                    <xs:annotation>
                        <xs:documentation>
                            Логический параметр, при значении false запись удаляется логически, при значении true запись
                            удаляется из системы.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseSoftDelete">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос на логическое удаление основной или исходной записи сущности ('RequestSoftDelete').
                Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках
                (смотри элемент 'common' из структуры 'UnidataResponseBody').

                В случае успешного исполнения содержит список ключей логически удалённых записей, а также
                соответствующих исходных записей.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="etalonKeys" type="data:EtalonKey" minOccurs="1" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Значение ключа, идентифицирующего логически удалённую основную запись
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="originKeys" type="data:OriginKey" minOccurs="1" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Значение ключа, идентифицирующего логически удалённую исходную запись
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- SoftDeleteEntity запрос-ответ -->
    <xs:complexType name="RequestRelationsSoftDelete">
        <xs:annotation>
            <xs:documentation>
Запрос на логическое удаление связи основной записи, исходной записи или деактивация отдельного периода.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Логическое удаление позволяет пометить связь либо исходной запись из конкретной системы источника, либо основной записи как логически удалённую.
При логическом удалении связи одной исходной записи из конкретной системы источника, связь на основная запись может продолжать оставаться активной, если в её составе есть другие активные исходные записи.
Тип удаления указывается в поле actionType.
При наличии прав запрос может содержать значение true в поле wipe. В этом случае запись будет ФИЗИЧЕСКИ и БЕЗВОЗВРАТНО удалена из хранилищи (hard delete).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего основную запись, для которой приизводится логическое удаление</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего исходную запись, для которой приизводится логическое удаление</xs:documentation></xs:annotation></xs:element>                        
                    </xs:choice>
                    <xs:element name="relations" type="tdapi:DeleteRelationsDef" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="actionType" type="tdapi:SoftDeleteActionType" use="required"/>
                <xs:attribute name="wipe" type="xs:boolean" use="optional"><xs:annotation><xs:documentation>Логический параметр, при значении false запись удаляется логически, при значении true запись удаляется из системы.</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseRelationsSoftDelete">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на логическое удаление основной или исходной записи сущности ('RequestSoftDelete').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').

В случае успешного исполнения содержит список ключей логически удалённых записей, а также соответствующих исходных записей.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                   <xs:element name="etalonKeys" type="data:EtalonKey" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего логически удалённую основную запись</xs:documentation></xs:annotation></xs:element>
                   <xs:element name="originKeys" type="data:OriginKey" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего логически удалённую исходную запись</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Get запрос-ответ -->

    <xs:complexType name="RequestGet">
        <xs:annotation>
            <xs:documentation>
Запрос на получение основных и исходных записей для конкретной сущности, а также исторических деталей.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Запрос всегда содержит имя сущности, ключ идентифицирующий либо основную либо исходную запись, а также ряд параметров, указывающих что именно нужно вернуть.
По умолчанию запрос всегда возвращает текущее значение основной записи, но вызывающая сторона может указать значение даты ('forDate'), на которое нужно вернуть основную запись. Данный функционал полезен при работе с временными диапазонами.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="asOf" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Дата, на которую нужно вернуть основную запись</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="originsAsOf" type="xs:boolean" use="required"><xs:annotation><xs:documentation>Возвращать все исходные записи на дату</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="etalonHistory" type="xs:boolean" use="required"><xs:annotation><xs:documentation>Возвращать историю изменений основной записи</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="softDeleted" type="xs:boolean" use="required"><xs:annotation><xs:documentation>Возвращать логически удалённые основные и исходные записи</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseGet">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение основных и исходных записей для конкретной сущности, а также исторических деталей ('RequestGet').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').

В зависимости от выбранных параметров в запросе, содержит различный набор исходных, а также исторических записей для конкретной основной записи.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="etalonRecord" type="data:EtalonRecord"><xs:annotation><xs:documentation>Основная запись либо на данный момент, либо на определённую дату, переданную в запросе</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="etalonHistoryRecords" type="data:EtalonRecord" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Исторические записи</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="originRecords" type="data:OriginRecord" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Исходные записи</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="rangeFromMin" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Минимальное значение всех временных диапозонов</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="rangeToMax" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Максимальное значение всех временных диапозонов</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="RequestGetAllPeriods">
        <xs:annotation>
            <xs:documentation>
Запрос на получение основных и исходных записей для конкретной сущности без исторических деталей.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Запрос всегда содержит имя сущности, ключ идентифицирующий либо основную либо исходную запись.
По умолчанию запрос всегда возвращает основную запись и все значения для всех активных временных диапазонов.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseGetAllPeriods">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение основных и исходных записей для конкретной сущности без исторических деталей ('RequestGetAllPeriods').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').

Ответ содержит набор данных для всех временных диапазонов основной записи.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="etalonRecord" type="data:EtalonRecord" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Список основных записей с указанием временного диапазона</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="RequestRelationsGet">
        <xs:annotation>
            <xs:documentation>
Запрос на получение связей записи конкретной сущности.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Запрос всегда содержит имя сущности, ключ идентифицирующий либо основную либо исходную запись, список имен связей, а также ряд параметров, указывающих что именно нужно вернуть.
По умолчанию запрос всегда возвращает текущее значение основной записи, но вызывающая сторона может указать значение даты ('asOf'), на которое нужно вернуть основную запись. Данный функционал полезен при работе с временными диапазонами.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:choice minOccurs="1" maxOccurs="1">
                        <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                        <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
                    </xs:choice>
                    <xs:element name="relations" type="xs:string" minOccurs="1" maxOccurs="unbounded"><xs:annotation><xs:documentation>Список имен связей сущности, по которым необходимо вернуть информацию.</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="asOf" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Дата, на которую нужно вернуть основную запись</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="ResponseRelationsGet">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение основных и исходных записей связей для конкретной сущности.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="relations" type="data:EntityRelations"><xs:annotation><xs:documentation>Контейнер связей</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="RequestInfoGet">
        <xs:annotation>
            <xs:documentation>
Запрос на получение общей информации для конкретного типа сущностей.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности</xs:documentation></xs:annotation></xs:attribute>
           		<xs:attribute name="from" type="xs:dateTime" use="required"/>
           		<xs:attribute name="to" type="xs:dateTime" use="required"/>
            </xs:extension>
            
        </xs:complexContent>
   
    </xs:complexType>

	<xs:complexType name="ResponseInfoGet">
		<xs:annotation>
			<xs:documentation>
				Ответ на Запрос на получение общей информации для
				конкретного типа
				сущностей ('RequestInfoGet').
				Общая часть ответа
				содержит код возврата, идентификатор логической
				операции и сообщения
				об ошибках (смотри элемент 'common' из
				структуры
				'UnidataResponseBody').
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tdapi:UnidataAbstractResponse">
				<xs:sequence>
					<xs:element name="statistic" type="tdapi:Statistic"
						minOccurs="1" maxOccurs="unbounded" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

    <!-- Search запрос-ответ -->
    <xs:complexType name="RequestSearch">
        <xs:annotation>
            <xs:documentation>
Запрос на поиск основных записей сущности.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').
Вызывающая сторона должна задать условия поиска и сортировки ('searchCondition' и 'sortCondition'), а также параметры постраничного вывода результатов
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element name="searchCondition" type="tdapi:SearchConditionDef"><xs:annotation><xs:documentation>Критерий, на основе которого осуществляется поиск</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="sortCondition" type="tdapi:SortConditionDef" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности, для которой осуществляется поиск</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="returnCount" type="xs:boolean" use="optional" default="true"><xs:annotation><xs:documentation>Возвращать общее количество записей, подпадающих по критерий поиска</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="doCountOnly" type="xs:boolean" use="optional" default="false"><xs:annotation><xs:documentation>Не возвращать данные, а только подсчитать количество записей, подпадающих по критерий поиска</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="pageSize" type="xs:integer" use="optional" default="10"><xs:annotation><xs:documentation>Размер страницы - количество сущностей, возвращаемых за один раз</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="pageNumber" type="xs:integer" use="optional" default="0"><xs:annotation><xs:documentation>Номер страницы, начиная с которого выдавать результаты</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="asOf" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Дата, на которую нужно искать</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="SortConditionDef">
        <xs:annotation>
            <xs:documentation>
                Сортировка по полю
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="field" type="xs:string"/>
            <xs:element name="type" type="tdapi:SortConditionTypeDef"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="SortConditionTypeDef">
        <xs:annotation>
            <xs:documentation>
                Тип сортировки(по возрастанию или убыванию)
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="ASC" />
            <xs:enumeration value="DESC" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ResponseSearch">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на поиск основных записей сущности ('RequestSearch').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="etalonRecord" type="data:EtalonRecord" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Найденные основные записи</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
                <xs:attribute name="pageSize" type="xs:integer" use="required"><xs:annotation><xs:documentation>Размер страницы - количество сущностей, возвращаемых за один раз</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="pageNumber" type="xs:integer" use="required"><xs:annotation><xs:documentation>Номер страницы, начиная с которой выданы результаты</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="count" type="xs:integer" use="optional"><xs:annotation><xs:documentation>Опциональное значение - количество записей, подпадающих по критерий поиска</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- MetaGetCleanseFunctionDesc запрос-ответ. Получить описание функции очистки данных -->
    <!--  
    <xs:complexType name="RequestMetaGetCleanseFunctionDesc">
        <xs:annotation>
            <xs:documentation>
Запрос на получение метаданных, описывающих конкретную функцию очистки данных
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

Запрос всегда содержит имя полное имя функции очистки данных.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:attribute name="cleanseFunctionName" type="xs:string" use="required"><xs:annotation><xs:documentation>Полное имя функции очистки данных, включающее имена групп разделённые точкой. Например 'Строковые.УбратьПробелы'</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseMetaGetCleanseFunctionDesc">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение метаданных, описывающих конкретную функцию очистки данных.
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Содержит полное описание семантики одной функции очистки данных
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="cleanseFunction" type="meta:CleanseFunctionExtendedDef" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Полное описание семинтики одной функции очистки данных</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->
    <!-- MetaGetCleanseFunctionList запрос-ответ. Получить список всех функций очистки данных -->
    <!--  
    <xs:complexType name="RequestMetaGetCleanseFunctionList">
        <xs:annotation>
            <xs:documentation>
                Запрос на получение метаданных, описывающих список всех функций очистки данных
                Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

                Запрос всегда содержит имя полное имя функции очистки данных.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseMetaGetCleanseFunctionList">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос на получение метаданных, описывающих список всех функций очистки данных.
                Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
                Содержит полный список всех функций очистки данных
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="cleanseFunctions" type="meta:ListOfCleanseFunctions" minOccurs="1" maxOccurs="1"><xs:annotation><xs:documentation>Полный список всех функций очистки данных</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->
    <!-- GetDataQualityErrors запрос-ответ. Получить ошибки для данной сущности -->

    <xs:complexType name="RequestGetDataQualityErrors">
        <xs:annotation>
            <xs:documentation>
Запрос на получение списка ошибок основной сущoности, созданных в результате применения правил контроля качества данных.
Общая часть запроса должна содержать данные для аутентификации пользователя (смотри элемент 'common' из структуры 'UnidataRequestBody').

Запрос всегда содержит имя сущности, ключ идентифицирующий либо основную либо исходную запись, а также опциональный параметр 'forDate', позволяющий вернуть актуальные ошибки на указанную дату.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:choice minOccurs="1" maxOccurs="1">
                    <xs:element name="etalonKey" type="data:EtalonKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего основную запись</xs:documentation></xs:annotation></xs:element>
                    <xs:element name="originKey" type="data:OriginKey"><xs:annotation><xs:documentation>Значение ключа, идентифицирующего исходную запись</xs:documentation></xs:annotation></xs:element>
                </xs:choice>
                <xs:attribute name="entityName" type="xs:string" use="required"><xs:annotation><xs:documentation>Имя сущности</xs:documentation></xs:annotation></xs:attribute>
                <xs:attribute name="forDate" type="xs:dateTime" use="optional"><xs:annotation><xs:documentation>Момент времени, на который нужно вернуть все актуальные ошибки. Если не указан, то возвращаются ошибки на текущий момент</xs:documentation></xs:annotation></xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ResponseGetDataQualityErrors">
        <xs:annotation>
            <xs:documentation>
Ответ на запрос на получение списка ошибок основной сущности, созданных в результате применения правил контроля качества данных ('RequestGetDataQualityErrors').
Общая часть ответа содержит код возврата, идентификатор логической операции и сообщения об ошибках (смотри элемент 'common' из структуры 'UnidataResponseBody').
Содержит список ошибок качества данных
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element name="dqError" type="data:DataQualityError" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>Ошибка, сфорированная в результате применения правил качества данных</xs:documentation></xs:annotation></xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="AliasCodeAttributePointerDef">
        <xs:annotation>
            <xs:documentation>
                Объет мапинга, необходимый для уведомления системы о том , что запись ссылается на альтернативный кодовый атрибут в справочнике.
                'recordAttributeName' - имя атрибута ссылающегося на справочник. (если это вложенный атрибут, то имя должно разделяться точками)
                'aliasCodeAttributeName' - имя альтернативного кодового атрибута справочника.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:string" name="aliasCodeAttributeName"/>
        <xs:attribute type="xs:string" name="recordAttributeName"/>
    </xs:complexType>
    <xs:simpleType name="ClassifierPointerType">
        <xs:annotation>
            <xs:documentation>
                Типы указателей для нод.
                NODE_NAME - нода классификатора будет найдена из полного имени ноды разделенного точкой.
                NODE_CODE - нода классификатора будет найдена из кода ноды.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="NODE_NAME"/>
            <xs:enumeration value="NODE_CODE"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="ClassifierPointerDef">
        <xs:annotation>
            <xs:documentation>
                Объет мапинга, необходимый для уведомления системы о том , что запись классификатора принадлежит определенной ноде.
                classifierName - имя классификатора, которым проклассифицированна запись.
                classifierPointer - значение указателя.
                pointerType - тип указателя.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="tdapi:ClassifierPointerType" name="pointerType" nillable="false"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="classifierName" use="required"/>
        <xs:attribute type="xs:string" name="classifierPointer" use="required"/>
    </xs:complexType>
	<xs:complexType name="Statistic">
		<xs:sequence>
			<xs:element name="type" type="tdapi:StatisticEnum"
				minOccurs="1" maxOccurs="1" />
			<xs:element name="series" type="tdapi:TimeSerie"
				minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TimeSerie">
		<xs:sequence>
			<xs:element name="time" type="xs:dateTime" minOccurs="1"
				maxOccurs="1" />
			<xs:element name="value" type="xs:int" minOccurs="1"
				maxOccurs="1" />
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="StatisticEnum" final="restriction">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NEW" />
			<xs:enumeration value="ERRORS" />
			<xs:enumeration value="UPDATED" />
			<xs:enumeration value="TOTAL" />
			<xs:enumeration value="MERGED" />
			<xs:enumeration value="DUPLICATES" />
            <xs:enumeration value="CLUSTERS"/>
		</xs:restriction>
	</xs:simpleType>

    <!-- Jobs Types -->
    <xs:complexType name="RequestFindAllJobs">
        <xs:annotation>
            <xs:documentation>
                Запрос списка операций.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RequestSaveJob">
        <xs:annotation>
            <xs:documentation>
                Сохранение операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element type="tdapi:Job" name="job"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RequestRemoveJob">
        <xs:annotation>
            <xs:documentation>
                Удаление операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:attribute type="xs:long" name="id" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RequestFindJob">
        <xs:annotation>
            <xs:documentation>
                Загрузка операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:attribute type="xs:long" name="id" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RequestRunJob">
        <xs:annotation>
            <xs:documentation>
                Запуск операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractRequest">
                <xs:sequence>
                    <xs:element type="tdapi:JobParameter" name="parameters" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute type="xs:long" name="id" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RequestJobStatus">
        <xs:annotation>
            <xs:documentation>
                Запрос состояния запуска операции.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute type="xs:long" name="id" use="required"/>
    </xs:complexType>

    <xs:complexType name="Job">
        <xs:annotation>
            <xs:documentation>
                Задача.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="tdapi:JobParameter" name="parameters" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute type="xs:long" name="id"/>
        <xs:attribute type="xs:boolean" name="enabled" use="required"/>
        <xs:attribute type="xs:boolean" name="error" use="required"/>
        <xs:attribute type="xs:string" name="cronExpression" use="required"/>
        <xs:attribute type="xs:string" name="description"/>
        <xs:attribute type="xs:boolean" name="skipCronWarnings" use="required"/>
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="xs:string" name="jobNameReference"/>
    </xs:complexType>
    <xs:complexType name="JobParameter">
        <xs:annotation>
            <xs:documentation>
                Параметр операции.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="tdapi:JobParameterValue" name="value"/>
        </xs:sequence>
        <xs:attribute type="xs:long" name="id"/>
        <xs:attribute type="tdapi:JobParameterType" name="type" use="required"/>
        <xs:attribute type="xs:string" name="name" use="required"/>
    </xs:complexType>
    <xs:simpleType name="JobParameterType">
        <xs:annotation>
            <xs:documentation>
                Тип параметра операции.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="STRING"/>
            <xs:enumeration value="LONG"/>
            <xs:enumeration value="DOUBLE"/>
            <xs:enumeration value="DATE"/>
            <xs:enumeration value="BOOLEAN"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="JobParameterValue">
        <xs:annotation>
            <xs:documentation>
                Значение парамертра операции.
                В Java это Object, по этому может быть значение одного из типов представленных в JobParameterType.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice>
                <xs:element type="xs:string" name="stringValue"/>
                <xs:element type="xs:long" name="longValue"/>
                <xs:element type="xs:double" name="doubleValue"/>
                <xs:element type="xs:dateTime" name="dateValue"/>
                <xs:element type="xs:boolean" name="booleanValue"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ResponseFindAllJobs">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос списка операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element type="tdapi:Job" name="jobs" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ResponseSaveJob">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос сохранения операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element type="tdapi:Job" name="job" />
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ResponseRemoveJob">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос удаления операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse"/>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ResponseFindJob">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос получения информации о запуске операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element type="tdapi:Job" name="job"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ResponseRunJob">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос запуска операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element type="tdapi:JobExecution" name="jobExecution"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ResponseJobStatus">
        <xs:annotation>
            <xs:documentation>
                Ответ на запрос статуса операции.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="tdapi:UnidataAbstractResponse">
                <xs:sequence>
                    <xs:element type="tdapi:JobExecution" name="jobExecution"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="JobExecution">
        <xs:annotation>
            <xs:documentation>
                Результат запроса на выполнения операции.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="tdapi:Job" name="job"/>
            <xs:element type="tdapi:JobParameter" name="parameters" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element type="tdapi:JobExecutionExitStatus" name="exitStatus"/>
            <xs:element type="tdapi:JobExecutionStep" name="executionSteps" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute type="tdapi:JobExecutionStatus" name="status" use="required"/>
        <xs:attribute type="xs:dateTime" name="startTime"/>
        <xs:attribute type="xs:dateTime" name="createTime"/>
        <xs:attribute type="xs:dateTime" name="endTime"/>
        <xs:attribute type="xs:dateTime" name="lastUpdated"/>
    </xs:complexType>
    <xs:simpleType name="JobExecutionStatus">
        <xs:annotation>
            <xs:documentation>
                Сатус выполнения операции.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="COMPLETED"/>
            <xs:enumeration value="STARTING"/>
            <xs:enumeration value="STARTED"/>
            <xs:enumeration value="STOPPING"/>
            <xs:enumeration value="STOPPED"/>
            <xs:enumeration value="FAILED"/>
            <xs:enumeration value="ABANDONED"/>
            <xs:enumeration value="UNKNOWN"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="JobExecutionExitStatus">
        <xs:annotation>
            <xs:documentation>
                Статус завершения операции.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="xs:string" name="description"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="code" use="required"/>
    </xs:complexType>
    <xs:complexType name="JobExecutionStep">
        <xs:annotation>
            <xs:documentation>
                Шаг выполнения операции
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element type="tdapi:JobExecutionExitStatus" name="exitStatus"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
        <xs:attribute type="tdapi:JobExecutionStatus" name="status" use="required"/>
        <xs:attribute type="xs:dateTime" name="startTime"/>
        <xs:attribute type="xs:dateTime" name="endTime"/>
        <xs:attribute type="xs:dateTime" name="lastUpdated"/>
    </xs:complexType>
</xs:schema>